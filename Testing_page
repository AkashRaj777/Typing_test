class Game:

 def __init__(self):
 self.w=750
 self.h=500
 self.reset=True
 self.active = False
 self.input_text=''
 self.word = ''
 self.time_start = 0
 self.total_time = 0
 self.accuracy = '0%'
 self.results = 'Time:0 Accuracy:0 % Wpm:0 '
 self.wpm = 0
 self.end = False
 self.HEAD_C = (255,255,0)
 self.TEXT_C = (0,0,128)
 self.RESULT_C = (0,51,0)


 pygame.init()
 self.open_img = pygame.image.load('type-speed-open.png')
 self.open_img = pygame.transform.scale(self.open_img, (self.w,self.h))
 self.bg = pygame.image.load('background.jpg')
 self.bg = pygame.transform.scale(self.bg, (750,500))
 self.screen = pygame.display.set_mode((self.w,self.h))
 pygame.display.set_caption('Typing Speed test')


 def draw_text(self, screen, msg, y ,fsize, color):
 font = pygame.font.Font("C:\Windows\Fonts\BELLB.ttf", fsize)
 text = font.render(msg, 1,color)
 text_rect = text.get_rect(center=(self.w/2, y))
 screen.blit(text, text_rect)
 pygame.display.update()

 def draw_text2(self, screen, msg, y ,fsize, color):
 font = pygame.font.Font("C:\Windows\Fonts\AGENCYR.ttf", fsize)
 text = font.render(msg, 1,color)
 text_rect = text.get_rect(center=(self.w/2, y))
 screen.blit(text, text_rect)
 pygame.display.update()

 def get_sentence(self):
 f = open('sentences.txt').read()
 sentences = f.split('\n')
 sentence = random.choice(sentences)
 return sentence
 def show_results(self, screen):
 if(not self.end):
 #Calculate time
 self.total_time = time.time() - self.time_start

 #Calculate accuracy
 count = 0
 for i,c in enumerate(self.word):
 try:
 if self.input_text[i] == c:
 count += 1
 except:
 pass
 self.accuracy = count/len(self.word)*100

 #Calculate words per minute
 print(len(self.input_text))
 print(self.total_time)
 self.wpm = len(self.input_text)*60/(5*self.total_time)
 self.end = True
 print(self.total_time)

 self.results = 'Time:'+str(round(self.total_time)) +" secs Accuracy:"+
str(round(self.accuracy)) + "%" + ' WPM: ' + str(round(self.wpm))
 db = mysql.connector.connect(host ="localhost",
 user = "root",
 password = "akash",
 database ="project")
 cursor = db.cursor()
 savequery = "insert into user_stats values(%s,%s,%s)"


recdata=(global_variables.username,str(round(self.total_time)),str(round(self.accura
cy)))

try:
 cursor.execute(savequery,recdata)
 db.commit()
 db.close()
 print("entered")
 except:
 db.rollback()
 print("Error occured")
 # draw icon image
 self.time_img = pygame.image.load('icon.png')
 self.time_img = pygame.transform.scale(self.time_img, (150,100))
 screen.blit(self.time_img, (self.w/2-200,self.h-120))
 self.exit_img = pygame.image.load('exit.jpg')
 self.exit_img = pygame.transform.scale(self.exit_img, (170,70))
 self.screen.blit(self.exit_img, (self.w/2-30,self.h-105))
 self.draw_text(screen,"", self.h - 70, 26, (100,100,100))

 print(self.results)
 pygame.display.update()
 def run(self):
 self.reset_game()
 self.running=True
 while(self.running):
 clock = pygame.time.Clock()
 self.screen.fill((0,0,0), (50,250,650,50))
 pygame.draw.rect(self.screen,self.HEAD_C, (50,250,650,50), 2)
 # update the text of user input
 self.draw_text(self.screen, self.input_text, 274, 22,(250,250,250))
 pygame.display.update()
 for event in pygame.event.get():
 if event.type == QUIT:
 self.running = False
 sys.exit()

 elif event.type == pygame.MOUSEBUTTONUP:
 x,y = pygame.mouse.get_pos()

# position of input box
 if(x>=50 and x<=650 and y>=250 and y<=300):
 self.active = True
 self.input_text = ''
 self.time_start = time.time()
 # position of reset box
 if(x>=310 and x<=510 and y>=390 and self.end):
 pygame.quit()

 if(x>=85 and x<=300 and y>=390 and self.end):
 self.reset_game()
 x,y = pygame.mouse.get_pos()

 elif event.type == pygame.KEYDOWN:
 if self.active and not self.end:
 if event.key == pygame.K_RETURN:
 print(self.input_text)
 self.show_results(self.screen)
 print(self.results)
 self.draw_text(self.screen, self.results,350, 28, self.RESULT_C)
 self.end = True

 elif event.key == pygame.K_BACKSPACE:
 self.input_text = self.input_text[:-1]
 else:
 try:
 self.input_text += event.unicode
 except:
 pass

 pygame.display.update()


 clock.tick(60)
 def reset_game(self):
 self.screen.blit(self.open_img, (0,0))

pygame.display.update()
 time.sleep(1)

 self.reset=False
 self.end = False
 self.input_text=''
 self.word = ''
 self.time_start = 0
 self.total_time = 0
 self.wpm = 0
 # Get random sentence
 self.word = self.get_sentence()
 if (not self.word): self.reset_game()
 #drawing heading
 self.screen.fill((0,0,0))
 self.screen.blit(self.bg,(0,0))
 msg = "Typing Speed Test"

 self.draw_text(self.screen, msg,40, 60,self.HEAD_C)
 # draw the rectangle for input box
 pygame.draw.rect(self.screen,(255,192,25), (50,250,650,50), 2)
 # draw the sentence string
 self.draw_text2(self.screen, self.word,200, 30,self.TEXT_C)

 pygame.display.update()
db2 = mysql.connector.connect(host ="localhost",
 user = "root",
 password = "akash",

 database ="project")
cursor2 = db2.cursor()

savequery2 = "select vname from login_details where login_time = (select
max(login_time) from login_details);"
cursor2.execute(savequery2)
dbrec2 = cursor2.fetchall()
for i in dbrec2:
 global_variables.username=i[0]
db2.close()
print("in game screen"+global_variables.username)
Game().run()
